# npx create-react-app [react-for-beginners(앱이름)]

# 생성된 앱으로 위치이동

# npm run start : development server(개발용 서버)를 만들게 될 거야.

# src 폴더는 네 모든 파일들을 넣을 폴더야.

# 그 안에서 제일 중용한 파일은 index.js 야. 그리고 index.js에서는 아주 익숙한 것들을 볼 수 있지.

# 이것들은 단지 컴포넌트야. 하지만 지금, 네가 nodeJS로 작업하고 있기 때문에 파일들을 각각 분리시키는 게 가능하고,
  좀 더 조직적으로 구성할 수 있게 됐지.

# 우리는 한 파일당 한 컴포넌트를 가지고 있고, index.js에서 그 컴포넌트를 import 시켰어.
  즉, 차후에 버튼과 같은 다른 컴포넌트도 한개의 파일로 이루어질거라는걸 의미하지.

# 그래서 보다시피 create-react-app은 꽤 많은 기본 파일들이 딸려 있어.
  우리는 index.js랑 App.js만 남기고 나머지는 다 지워줄거야.
  결국 우린 깔끔한 create-react-app의 설치판을 얻었어.

# index.js에 우리 리액트 어플리케이션을 랜더링해줄 뿐인 index랑
  Welcome back!을 랜더링해줄 뿐인 우리의 App

# 우리는 끝냈어. 우린 React App을 만들었어.
  우리가 해야 할 일은, 어플리케이션을 만들고 npm start를 실행하는 거야.  

# npm i prop-types   
  npm aux 하지 않기... 프로젝트 망가진다.

# 특정 컴포넌트를 위한 CSS파일을 만들 수 있는 기능을 얻었다는 거야.

# create-react-app으로 작업할 때의 포인트는 '분할하고' '정복하는' 거야.

# 이게 우리가 create-react-app을 배울 때 진짜 멋진 점인데, 바로 CSS modules라는거야.
  우리는 Button.module.css에 .btn css를 작성하고, 우리는 index.js에 import 하지 않을거야.
  대신에, 이 스타일을 Button.js에 import 시켜줄 거야.
  import styles from "./Button.module.css"
  이유는, 이제 내가 class이름을 내 버튼에 추가할 수 있는데
  하지만 className을 btn 이런 식으로 쓰지 않을 거야.

# 우리는 css코드를 작성하고 있는데 하지만 create-react-app은 이 css 코드를 javascript 오브젝트로 변환시켜준다.
  그리고 이 javascript 오브젝트는 btn을 안에 갖고 있는 거지.
  그리고 알 수 있지. 
  create-react-app은 무작위적인 랜덤 class를 갖는다는 걸.
  심지어 네 style들도 modular(모듈러)가 될 수 있다는 거야.

# 고로 이제 동일한 class 이름을, btn을, 다른 파일 내에서도 사용할 수 있어.
  하지만 create-react-app은 랜덤하게 보이는 클래스 이름을 만들어낼 거지.

# 우리가 create react app을 사용하기 때문에,우리가 React. 뭐라고 쓰지 않고 그냥 useState만 import 해줄 수 있어.

# 내 state가 변할 때마다 매번 re-render될거야. 그걸 원하지 않을 때도 있겠지.
  가끔은 첫 번째로 render 할 때만 코드를 실행하고 싶을 수도 있겠지.
  그리고 나중에는 그렇게 하지 않을 수도 있어.

# 그래서 첫 번째 render에만 코드가 실행되고, 다른 state 변화에는 실행되지 않도록 하는거야.

# 좋아, 이런 일이 언제 일어나냐면 예를들어, 네가 API를 통해 데이터를 가져올 때
  첫 번째 component render에서 API를 call하고 이후에 state가 변화할 때, 그 API에서
  데이터를 또 다시 가져오고 싶진 않겠지?

# 우리는 어떻게 특정 코드들이 첫번째 component render에서만 실행되게 하는지 배우고 싶어.
  처음 한 번만, 나중에 state가 변화해도, 그 코드는 다시 실행되지 않는거야.
  이게 바로 우리가 해결하려던 문제였어.

# state가 변화할 때 너의 모든 component는 다시 실행되고 모든 code들도 다시 실행될거야.
   
# react 팀이 우리를 위해 개발해둔것이 있어. useEffect

# useEffect는 두 개의 argument를 가지는 function이야.
  첫 번째 argument는 우리가 딱 한번만 실행하고 싶은 코드가 될거야.
  두 번째 argument는 정말 마법같은 친구인데, 일단은 나를 믿고 나중에 다시 이야기 해보도록 하자.
  const iRunOnlyOnce = () => {
    console.log('I run only once.')
  }
  useEffect(iRunOnlyOnce, [])

# 이제 나는 내 코드의 특정한 부분만이 변화했을 때, 원하는 코드들을 실행할 수 있는 방법을 배우고 싶어.
  네가 keyword가 변화할 때 코드를 실행하고 싶다면, 이 자리에 'keyword'라고 써줘.
  여기서 하는 건, 이 'keyword'가 변화할 때 코드를 실행할 거라고 react.js에게 알려주는 거야.
  이건 우리가 react.js에게 이 keyword를 지켜봐. 라고 말해줬기 때문이야.

# Cleanup function이라는 걸 배워볼거야! 이것은 많이 사용하진 않지만 알려줄게.

# component가 destroy 될 때도 코드를 실행할 수 있는거야.
  useEffect 에서 파괸될때 실행될 코드를 반환해주면 된다(함수)

# 사람들은 주로 이런 function들을 만들지는 않고 보통은 useEffect안에 모든 것을 작성하지.

# 공식적인 이론은 끝